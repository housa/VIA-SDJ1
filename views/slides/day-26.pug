
extends layout

block content
  section
    h2 Software Development with UML and Java
    i Day 26
  section
    h2 Agenda
    ul
      li Abstract methods
      li Abstract classes
      li Exceptions
      li Exception classes
      li Handling exceptions
  section
    section
      h2 Abstract methods
      ul
        li The #[tt final] keyword could be used to prevent subclasses from overriding a method
        li What if we want the opposite? Force all subclasses to implement a given method?
          ul
            li This is done by making the method in the superclass #[tt abstract]
        li An abstract method only has a header and no body
      pre
        code.Java.
          &lt;&lt;AccessModifier&gt;&gt; abstract &lt;&lt;ReturnType&gt;&gt; &lt;&lt;MethodName&gt;&gt;(&lt;&lt;Parameters&gt;&gt;);
      ul
        li We use the keyword #[tt abstract] and end the method header with a semicolon instead of a body
      pre
        code.Java(data-noescape).
          public #[span.force-red abstract] double getSalary(double payRate);
    section
      h2 Abstract methods
      ul
        li Based on the method header, each subclass must implement the method body
        li Each subclass will implement the method in an appropriate way
        li If a subclass does not implement the method, we will get a compiler error
        li Any class with an abstract method, must be declared as an #[emph abstract class], if not we will also get a compiler error
    section
      h2 Abstract classes
      ul
        li A class becomes abstract, by placing the #[tt abstract] keyword in the class definition:
      pre
        code.Java(data-noescape).
          public #[span.force-red abstract] class ClassName {
            // Class body
          }
      ul
        li It is #[u not] possible to make objects of an abstract class
        li They are only used for letting other classes inherit from them
          ul
            li I.e. it serves only as a superclass for other classes
        li An abstract class does not have to contain any abstract methods, but usually they will
    section
      h2 Abstract example
      img(src="/static/images/TwoDimensionalShape.svg")
    section
      h2 Abstract example
      pre
        code.Java(data-noescape).
          public #[span.force-red abstract] class TwoDimensionalShape {
            private double x;
            private double y;
          
            public TwoDimensionalShape(double x, double y) {
              this.x = x;
              this.y = y;
            }
            
            // Rest of class here
            public abstract double getArea();
          }
    section
      h2 Abstract example
      pre
        code.Java(data-noescape).
          public class Circle extends TwoDimensionalShape {
            private double radius;
          
            public Circle(double x, double y, double radius) {
              super(x, y);
              this.radius = radius;
            }
            
            // The getArea was abstract, so we have to implement it 
            //  in our non-abstract subclass
            public double getArea() {
              return radius * radius * Math.PI; 
            }
          }
    section
      h2 Abstract example
      pre
        code.Java(data-noescape).
          public class Rectangle extends TwoDimensionalShape {
            private double width;
            private double length;
          
            public Rectangle(double x, double y, double width, double length) {
              super(x, y);
              this.width = width;
              this.length = length;
            }
            
            // The getArea was abstract, so we have to implement it 
            //  in our non-abstract subclass
            public double getArea() {
              return width * length; 
            }
          }
    section
      h2 Abstract test
      pre
        code.Java.
          public class AbstractTest {
            public static void main(String[] args) {
              // The following line will cause a compiler error, since
              //  TwoDimensionalShape is abstract and cannot be instantiated.
              TwoDimensionalShape ts = new TwoDimensionalShape(2.0, 4.0);
              
              Circle c1 = new Circle(7.0, 7.0, 3.0);
              Rectangle r1 = new Rectangle(3.0, 2.0, 7.0, 3.0);
              System.out.println(c1.getArea());
              System.out.println(r1.getArea());
              
              TwoDimensionalShape ts1 = new Circle(7.0, 7.0, 3.0);
              TwoDimensionalShape ts2 = new Rectangle(3.0, 2.0, 7.0, 3.0);
              
              System.out.println(ts1.getArea());
              System.out.println(ts2.getArea());
            }
          }
      pre.stdout.
        28.274333882308138
        21.0
        28.274333882308138
        21.0
    section
      h2 Abstract test
      pre
        code.Java.
          import java.text.DecimalFormat;
          
          public class AbstractTest2 {
            public static void main(String[] args) {
              DecimalFormat df = new DecimalFormat("0.00");
              
              TwoDimensionalShape[] tds = new TwoDimensionalShape[4];
              tds[0] = new Circle(4, 8, 15);
              tds[1] = new Circle(16, 23, 42);
              tds[2] = new Rectangle(19, 23, 42, 47);
              tds[3] = new Rectangle(24, 10, 20, 13);
          
              for (int i = 0; i &lt; tds.length; i++) {
                System.out.println("Area: " + df.format(tds[i].getArea()));
              }
            }
          }
      pre.stdout.
        Area: 706,86
        Area: 5541,77
        Area: 1974,00
        Area: 260,00
  section
    section
      h2 Exceptions
      ul
        li An exception is an object that is generated as the result of an error or an unexpected event
        li Exceptions are said to be "thrown"
        li It's the programmers job to detect and handle exceptions
        li If an exception is not handled, the program will crash
        li Java allows us to create #[emph exception handlers]
    section
      h2 Exception classes
      ul
        li Exception objects are created from classes in the Java API hierarchy of exception classes
        li All exception classes inherit from the #[tt Throwable] class
      img(src="/static/images/Exceptions.svg")
    section
      h2 Exception classes
      ul
        li A programmer should handle most of the exceptions that are from classes that inherits from the #[tt Exception] class
        li Classes that inherit from #[tt Error] are thrown when critical errors occur
          ul
            li E.g. an internal error in the JVM, or running out of memory
            li Applications should #[u not] try to handle these errors, as they stem from a serious condition, that are most likely unrecoverable
    section
      h2 Handling exceptions
      ul
        li To handle an exception, we use #[emph try-catch] statement:
      pre
        code.Java.
          try {
            // Statements here that could cause an exception
          } catch (&lt;&lt;ExceptionType&gt;&gt; &lt;&lt;ParameterName&gt;&gt;) {
            // Statements to run if there is an exception
          }
      ul
        li The #[tt try] keyword is used with a block of code, that can potentially throw an exception. This block of code is known as a #[emph try block]
        li The application will not halt if the statements inside a try block throws an exception
    section.small-text
      h2 Handling exceptions
      ul
        li After the #[emph try block], a #[tt catch] block appears
      pre
        code.Java.
          catch(&lt;&lt;ExceptionType&gt;&gt; &lt;&lt;ParameterName&gt;&gt;)
      ul
        ul
          li #[emph ExceptionType] is the type of the exception we wish to handle, if the statements in the #[tt try] block throws it
          li #[emph ParameterName] is a variable name, which will reference the thrown exception object.
            ul
              li Usually used to get and print out the information about the exception:
      pre
        code.Java.
          catch(ArrayIndexOutOfBoundsException e) {
            e.printStackTrace();
          }
      ul
        li The code in the #[tt catch] block is only executed if the #[tt try] block throws an exception
    section
      h1 Live code
      pre
        code.Java.
          import java.util.Scanner;
        
          public class CauseException {
            public static void main(String[] args) {
              int anInt = 0;
          
              Scanner scan = new Scanner(System.in);
              
              System.out.print("Enter an int: ");
              anInt = scan.nextInt(); // Handle when user doesn't input number (InputMismatchException)
          
              System.out.println("Do more stuff");
            }
          }
    section
      h2 Catching multiple exceptions
      ul
        li We know exceptions inherit from the #[tt Exceptions] class
        li. 
          So, a #[tt catch] block that uses a parameter variable of type #[tt Exception] is capable of catching any 
          exception that inherits from the #[tt Exception] class:
      pre
        code.Java(data-noescape).
          catch(#[span.force-red Exception e]) {
            e.printStackTrace();
          }
      ul
        li Usually not really a good idea though, since you want to handle the errors being thrown and different errors has to be handled differently.
    section
      h2 Catching multiple exceptions
      ul
        li. 
          If the statements inside a #[tt try] block can throw more than one type of exception, we don't have to 
          use the #[tt Exception] class as type, we can just write a #[tt catch] block for each type of exception:
      pre
        code.Java.
          try {
            // Statements here
          } catch (ExceptionType1 ParameterName) {
            // Statements to run if there is an exception of type ExceptionType1
          } catch(ExceptionType2 ParameterName) {
            // Statements to run if there is an exception of type ExceptionType2
          }
    section
      h2 Multiple exceptions example
      pre
        code.Java.
          public class ArrayTest {
            public static void main(String[] args) {
              String[] array = new String[2];
              array[0] = "SDJ";
          
              try {
                System.out.println(array[1].length());
              } catch (NullPointerException e) {
                e.printStackTrace();
              } catch (ArrayIndexOutOfBoundsException e) {
                e.printStackTrace();
              }
            }
          }
    section
      h2 The finally block
      ul
        li In addition to the #[tt catch] blocks, the #[tt try] block may have an optional #[tt finally] block
        li The statements inside the #[tt finally] block is always executed. Whether an exception was thrown or not
        li. 
          The #[tt finally] block is often used to close connections to databases or opened files, actions which 
          should always happen, regardless of any exceptions
    section
      h2 The finally block
      ul
        li If present, the #[tt finally] block must appear after the #[tt catch] blocks:
      pre
        code.Java.
          try {
            // Statements here
          } catch (ExceptionType parameterName) {
            // Statements to run if there is an exception of type ExceptionType
          } finally {
            // Statements to run regardless of whether or not there is an exception
          }
    section
      h2 The call stack and stacktrace
      ul
        li The #[emph call stack] is an internal list of all the methods that are currently executing -- a #[emph stack trace] prints out this list
        li The list is printed, when we call #[tt printStackTrace()] on an exception
        li The stack trace shows the method that was executing when an exception occurred, and all the methods 
        | that were called in order to execute that method
    section
      h2 The callstack and stack trace
      pre
        code.Java.
          public class E {
              public static void main(String[] args) {
                  try {
                      foo();
                  } catch (NullPointerException npe) {
                      npe.printStackTrace();
                  }
              }

              public static void foo() {
                  bar();
              }

              public static void bar() {
                  E e = null;
                  e.baz();
              }

              public void baz() { }
          }
      pre.stdout.
        java.lang.NullPointerException
          at scratchpad.E.bar(E.java:21)
          at scratchpad.E.foo(E.java:16)
          at scratchpad.E.main(E.java:9)
    section
      h2 Unchecked exceptions
      ul
        li There are two overall categories of exceptions: #[emph Checked] and #[emph unchecked] exceptions
        li #[emph Unchecked exceptions] are those that extends the #[tt RuntimeException] class
        ul
          li These exceptions are often just caused by programming errors. E.g. #[tt ArrayIndexOutOfBoundsException]
          li Often unchecked exception should not be handled, at least not those which we can fix with properly written 
          | code.
          li Some are caused by things like wrong input values from users, and then it's a good idea to handle them
    section
      h2 Checked exceptions
      ul
        li #[emph Checked exception] are all exceptions that do not extend the #[tt RuntimeException] class
        li These exceptions #[u has] to be handled, otherwise we will get a compiler error
        li If the code in a method might throw a checked exception, then we must handle it (with a #[emph try-catch])
        li Alternatively, we can choose to not handle the error and just "pass it upwards" by using the #[tt throws] clause
        li When we use the #[tt throws] clause, whoever calls the method has to handle it
      pre
        code.Java.
          public void readFile() throws FileNotFoundException {
            // Statements that could cause a FileNotFoundException
          }
    section
      h2 Throwing exceptions
      ul
        li We can get our own code to throw exceptions
        li To manually throw an exception from inside a method, use the #[tt throw] keyword (not the same as the #[tt throws] keyword)
      pre
        code.Java.
          throw new &lt;&lt;ExceptionType&gt;&gt;(&lt;&lt;MessageString&gt;&gt;);
      ul
        li The #[emph MessageString] argument contains a custom error message, we can later retrieve this message from the exception object with the #[tt getMessage] method:
      pre
        code.Java.
          e.getMessage();
    section
      h2 Throwing exceptions
      pre
        code.Java.
          public class Person {
            // Rest of class
            
            public void setName(String name) {
              if (name == null) {
                throw new NullPointerException("Name is null");
              } else if (name.length() == 0) {
                throw new IllegalArgumentException("Name is empty");
              }
          
              // This line is only executed, if neither exception was thrown
              this.name = name;
            }
          }
    section
      h2 Throwing exceptions
      pre
        code.Java.
          public class PersonTest {
            public static void main(String[] args) {
              Person p1 = new Person("Lukas");
              
              try {
                p1.setName("");
              } catch (NullPointerException e) {
                System.out.println(e.getMessage());
              } catch (IllegalArgumentException e) {
                System.out.println(e.getMessage());
              }
              System.out.println(p1.getName());
            }
          }
      pre.stdout.
        Name is empty
        Lukas