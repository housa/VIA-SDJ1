
extends layout

block content
  section
    h2 Software Development with UML and Java
    i Day 29
  section
    section
      h2 GUI
      ul
        li We have mostly looked at reading and writing to the console for input and output
        li Usually, Java programs have a #[emph graphical user interface - GUI]
          ul
            li A GUI is any kind of graphic visual interface
            li Allows for input from keyboard and mouse
            li Can present the user with colours, buttons etc.
    section
      h2 AWT and Swing
      ul
        li The Java API has two main libraries for creating GUIs
        li #[emph Abstract Windowing Toolkit (AWT)] was the original library
          ul
            li In some cases, we still use some of the AWT classes
        li #[emph Swing] was added to Java later, and it's the most common GUI choice today.
  section
    section
      h2 Dialog boxes
      ul
        li The GUI element that is probably easiest to create, is a #[emph dialog box]
          ul
            li A small windows, which displays a message to the user or requests input
        li We can display different dialog boxes using the #[tt JOptionPane] class:
          ul
            li Message Dialog - a dialog box that displays a message
            li Input Dialog - a dialog that prompts the user for input
            li Confirm Dialog - a dialog that asks the user a Yes/No question
    section
      h2 Dialog boxes
      ul
        li Dialog boxes displayed by the #[tt JOptionPane] are #[emph modal] boxes
        li A modal dialog box, halts the execution of the program, until the dialog box is closed
  section
    section
      h2 Message dialog
      pre
        code.Java.
          import javax.swing.JOptionPane;
          
          public class TestMessageDialog {
            public static void main(String[] args) {
              JOptionPane.showMessageDialog(null, "This is a message");
            }
          }
      img(src="/static/images/dialog1.png")
    section
      h2 Message dialog
      ul
        li We can change the title of the dialogs and choose between a range of different icons:
      pre
        code.Java.
          import javax.swing.JOptionPane;
          
          public class TestMessageDialog {
            public static void main(String[] args) {
              JOptionPane.showMessageDialog(null, "This is a message", 
                                              "My title", JOptionPane.ERROR_MESSAGE);
            }
          }
      img(src="/static/images/dialog2.png")
    section
      h2 Message dialog
      ul
        li These are the different icons:
        ul
          li #[tt JOptionPane.ERROR_MESSAGE]
          li #[tt JOptionPane.INFORMATION_MESSAGE] (Default)
          li #[tt JOptionPane.WARNING_MESSAGE]
          li #[tt JOptionPane.QUESTION_MESSAGE]
          li #[tt JOptionPane.PLAIN_MESSAGE]
    section
      h2 Message dialog
      div.split-2-left
        img(src="/static/images/dialog3_1.png")
        img(src="/static/images/dialog3_3.png")
      div.split-2-right
        img(src="/static/images/dialog3_2.png")
        img(src="/static/images/dialog3_4.png")
      img(src="/static/images/dialog3_5.png")
  section
    section
      h2 Input dialog
      ul
        li An input dialog is a quick and simple way to ask the user for some input
        li An input dialog can, in some cases, be used as an input to the #[tt Scanner] class
        li The dialog displays a text field, an #[tt Ok] button and a #[tt Cancel] button
          ul
            li If #[tt Ok] is pressed, the dialog returns the contents of the text field
            li If #[tt Cancel] is pressed, the dialog returns #[tt null]
    section
      h2 Input dialog
      pre
        code.Java.
          import javax.swing.JOptionPane;

          public class TestInputDialog {
            public static void main(String[] args) {
              String input = JOptionPane.showInputDialog(null, 
                                              "Type something here:", 
                                              "My Input Title", 
                                              JOptionPane.INFORMATION_MESSAGE);
              System.out.println(input);
            }
          }
      img(src="/static/images/dialog4.png")
    section
      h2 Input dialog
      pre
        code.Java.
          import javax.swing.JOptionPane;
        
          public class PayrollExample {
              public static void main(String[] args) {
                  String name = JOptionPane.showInputDialog(null,
                          "What is your name?", "Payroll",
                          JOptionPane.QUESTION_MESSAGE);

                  String hoursStr = JOptionPane.showInputDialog(null,
                          "How many hour did you work this week?", "Payroll",
                          JOptionPane.QUESTION_MESSAGE);

                  double hours = Double.parseDouble(hoursStr);

                  String salaryStr = JOptionPane.showInputDialog(null,
                          "What is your hourly pay rate?", "Payroll",
                          JOptionPane.QUESTION_MESSAGE);

                  double salary = Double.parseDouble(salaryStr);

                  JOptionPane.showMessageDialog(null,
                          name + ", your weekly salary is: " + hours * salary,
                          "Payroll", JOptionPane.INFORMATION_MESSAGE);
              }
          }
    section
      h2 Input dialog
      div.split-1-3-left
        img(src="/static/images/dialog5_1.png")
      div.split-1-3-left
        img(src="/static/images/dialog5_2.png")
      div.split-1-3-right
        img(src="/static/images/dialog5_3.png")
      img(src="/static/images/dialog5_4.png")
  section
    section
      h2 Confirm dialog
      ul
        li A confirm dialog is usually used to ask the user a yes or no question
        li By default, there will be a #[tt Yes], #[tt No] and a #[tt Cancel] button
        li The #[tt showConfirmDialog] method, returns an int that represents which button were clicked by the user:
          ul
            li #[tt JOptionPane.YES_OPTION] &larr; 0
            li #[tt JOptionPane.NO_OPTION] &larr; 1
            li #[tt JOptionPane.CANCEL_OPTION] &larr; 2
    section
      h2 Confirm dialog
      pre
        code.Java.
          import javax.swing.JOptionPane;

          public class TestConfirmDialog {
            public static void main(String[] args) {
              int choice = JOptionPane.showConfirmDialog(null,
                      "Whats is your choice?");
              if (choice == JOptionPane.YES_OPTION) {
                System.out.println("Choice is yes");
              } else if (choice == JOptionPane.NO_OPTION) {
                System.out.println("Choise is no");
              } else if (choice == JOptionPane.CANCEL_OPTION) {
                System.out.println("Choice is cancel");
              }
            }
          }
      img(src="/static/images/dialog6.png")